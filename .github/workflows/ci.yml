---
name: CI
on:
  schedule:
    - cron: '0 12 * * 0'
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

permissions:
  contents: write
  packages: write
  checks: write
  pull-requests: write
  repository-projects: read

env:
  NODE_OPTIONS: "â€”-max_old_space_size=4096"

jobs:
  cache_pnpm:
    name: Cache PNPM
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.ROBOT_TOKEN }}
    - uses: pnpm/action-setup@v2
      with:
        version: 8

    - name: Use Node
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'

    - name: Install dependencies
      run: make init

  CI_checks:
    runs-on: ubuntu-latest
    needs: cache_pnpm
    strategy:
      matrix:
        action: ['lint', 'format', 'test', 'build']
    steps:
    - uses: actions/checkout@v3
      with:
        token: ${{ secrets.ROBOT_TOKEN }}
    - uses: pnpm/action-setup@v2
      with:
        version: 8
    - name: Use Node
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'pnpm'
        cache-dependency-path: 'pnpm-lock.yaml'

    - run: make init

    - name: lint
      if:  matrix.action == 'lint'
      run: make lint

    - name: format
      if:  matrix.action == 'format'
      run: make format

    - name: test
      if:  matrix.action == 'test'
      run: make test

    - name: build
      if:  matrix.action == 'build'
      run: make build

    - name: Check for changes
      id: check_changes
      run: |
        git config --global user.email "ci-bot@percona.com"
        git config --global user.name "CI Bot"
        git diff --exit-code || echo "::set-output name=changes::true"

    - uses: stefanzweifel/git-auto-commit-action@v5
      if: steps.check_changes.outputs.changes == 'true' && github.event_name == 'pull_request'
      with:
        commit_message: "chore: lint/format"
        token: ${{ secrets.ROBOT_TOKEN }}

  E2E:
    name: E2E Tests
    needs: cache_pnpm
    runs-on: ubuntu-20.04
    env:
      GOPRIVATE: github.com/percona,github.com/percona/percona-everest-backend,github.com/percona/percona-everest-cli,github.com/percona/everest-operator
    steps:
      - uses: actions/checkout@v3
        with:
          path: FE
          token: ${{ secrets.ROBOT_TOKEN }}
      - uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Use Node
        uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: 'pnpm'
          cache-dependency-path: FE/pnpm-lock.yaml


      - name: Checkout CLI repo
        uses: percona-platform/checkout@v3
        with:
          repository: percona/percona-everest-cli
          ref: 'main'
          path: CLI

      - name: Configure git for private modules
        env:
          ROBOT_TOKEN: ${{ secrets.ROBOT_TOKEN }}
        run: git config --global url."https://percona-platform-robot:${ROBOT_TOKEN}@github.com".insteadOf "https://github.com"

      - name: Set up Go release
        uses: percona-platform/setup-go@v4
        with:
          go-version: 1.20.x

      - name: Set GO_VERSION environment variable
        run: |
          go version
          echo "GO_VERSION=$(go version)" >> $GITHUB_ENV

      - name: Archive backend log
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: everest-backend.log
          path: BE/everest-backend.log

      - name: Create KIND cluster
        uses: helm/kind-action@v1.8.0

      - name: Run Provisioning
        run: |
          cd CLI
          go run cmd/everest/main.go install --monitoring.enable=false --name=minikube --operator.mongodb=true --operator.postgresql=true --operator.xtradb-cluster=true --skip-wizard --namespace percona-everest

      - name: Expose Everest backend
        run: |
          kubectl port-forward -n percona-everest deployment/percona-everest 8080:8080 &

      - name: Run Everest
        run: |
          cd FE
          make init
          pnpm --filter "@percona/everest" dev &

      - name: Run integration tests
        run: |
          cd FE
          pnpm --filter "@percona/everest" e2e

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: FE/apps/everest/.e2e/test-results/

      - name: Archive report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: FE/apps/everest/.e2e/playwright-report/
